(define-syntax pmatch
  (lambda (x)
    (syntax-case x (guard else)
      ((_ (rator rand ...) cs ...)
       #'(let ((v (rator rand ...)))
           (pmatch v cs ...)))
      ((_ v)
       #'(errorf 'pmatch "failed on ~s" v))
      ((_ v (else e0 e ...))
       #'(begin e0 e ...))
      ((_ v (pat (guard g ...) e0 e ...) cs ...)
       #'(let ((fk (lambda () (pmatch v cs ...))))
           (letrec-syntax
             ((ppat (lambda (x)
                      (syntax-case x (__ quote unquote)
                                  ((_ v __ kt kf)
                                   #'kt)
                                  ((_ v () kt kf)
                                   #'(if (null? v) kt kf))
                                  ((_ v (quote lit) kt kf)
                                   #'(if (equal? v (quote lit)) kt kf))
                                  ((_ v var kt kf)
                                   (identifier? #'var)
                                   #'(let ((var v)) kt))
                                  ((_ v (x . y) kt kf)
                                   #'(if (pair? v)
                                         (let ((vx (car v)) (vy (cdr v)))
                                           (ppat vx x (ppat vy y kt kf) kf))
                                         kf))
                                  ((_ v lit kt kf)
                                   #'(if (equal? v (quote lit)) kt kf))))))
                     (ppat v pat (if (and g ...) (begin e0 e ...) (fk)) (fk)))))
                ((_ v (pat e0 e ...) cs ...)
                 #'(let ((fk (lambda () (pmatch v cs ...))))
                     (letrec-syntax
                         ((ppat (lambda (x)
                                  (syntax-case x (__ quote unquote)
                                    ((_ v __ kt kf)
                                   #'kt)
                                    ((_ v () kt kf)
                                     #'(if (null? v) kt kf))
                                    ((_ v (quote lit) kt kf)
                                     #'(if (equal? v (quote lit)) kt kf))
                                    ((_ v var kt kf)
                                     (identifier? #'var)
                                     #'(let ((var v)) kt))
                                    ((_ v (x . y) kt kf)
                                     #'(if (pair? v)
                                         (let ((vx (car v)) (vy (cdr v)))
                                           (ppat vx x (ppat vy y kt kf) kf))
                                         kf))
                                    ((_ v lit kt kf)
                                     #'(if (equal? v (quote lit)) kt kf))))))
                       (ppat v pat (begin e0 e ...) (fk))))))))


(define (fact n)
  (pmatch
      n
    (1 1)
    (n (* n (fact (- n 1))))))
(fact 10)
(newline)
